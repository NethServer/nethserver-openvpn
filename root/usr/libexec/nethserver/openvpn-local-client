#!/usr/bin/perl

use esmith::ConfigDB;
use strict;

sub cat {
    my $file = shift;
    my $str = "";
    open(FILE, $file) || warn "Can't open file: $file\n";
    while (<FILE>) {
        $str .= "$_";
    }
    close(FILE);
    return $str;
}

my $name = shift || die ("Please insert an account name");

my $cdb = esmith::ConfigDB->open_ro();

my $OUT = "######### NethServer OpenVPN client configuration #########\n\n";
my $openvpn = $cdb->get('openvpn@host-to-net');
my $SystemName = $cdb->get('SystemName')->value();
my $DomainName = $cdb->get('DomainName')->value();
my $remote = $openvpn->prop('Remote') || "";

my $mode = $openvpn->prop('Mode') || 'routed';
if ($mode eq 'routed') {
    $OUT.="dev tun\n";
} elsif ($mode eq 'bridged') {
    $OUT.="dev tap\n";
}

$OUT .= "client\n";
if ($remote eq '') {
    $OUT .= "remote $SystemName.$DomainName\n";
} else {
    foreach (split(',',$remote)) {
        $OUT .= "remote $_\n";
    }
}
if ($openvpn->prop('UDPPort') ne '') {
    $OUT .= "port ".$openvpn->prop('UDPPort')."\n";
    $OUT .= "proto udp\n";
    $OUT .= "explicit-exit-notify 1\n";
} elsif ($openvpn->prop('TCPPort') ne '') {
    $OUT .= "port ".$openvpn->prop('TCPPort')."\n";
    $OUT .= "proto tcp-client\n";
}

$OUT .= "float\n";

my $mode = $openvpn->prop('AuthMode') || 'password';
if ($mode eq 'password' or $mode eq 'password-certificate') {
    $OUT.="auth-user-pass\n";
};

if ($mode eq 'certificate-otp') {
  $OUT.="auth-user-pass\n";
  $OUT.="reneg-sec 0\n";
}

if ($mode ne 'password') {
    $OUT.= "# Authentication: certificate\n";
    $OUT .= "<cert>\n";
    $OUT .= cat("/var/lib/nethserver/certs/$name.crt");
    $OUT .= "</cert>\n";
    $OUT .= "<key>\n";
    $OUT .= cat("/var/lib/nethserver/certs/$name.key");
    $OUT .= "</key>\n";
}

$OUT .= "<ca>\n";
$OUT .= cat("/etc/pki/tls/certs/NSRV.crt");
$OUT .= "</ca>\n";

my $digest = $openvpn->prop('Digest') || '';
my $cipher = $openvpn->prop('Cipher') || '';
if ($digest ne '') {
    $OUT .= "auth $digest\n";
}
if ($cipher ne '') {
    $OUT .= "cipher $cipher\n";
}

my $compression = $openvpn->prop('Compression') || 'enabled';
if ($compression ne 'disabled' && $compression ne 'enabled') {
    $OUT .= "compress $compression\n";
} elsif ($compression eq 'enabled') { # fallback to lzo
    $OUT .= "compress lzo\n";
}

$OUT .= "verb 3\n";
$OUT .= "persist-key\n";
$OUT .= "persist-tun\n";
$OUT .= "nobind\n";
$OUT .= "passtos\n";

print "$OUT\n";
