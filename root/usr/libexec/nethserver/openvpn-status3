#!/usr/bin/perl -w
use strict;
use Socket;
use IO::Handle;
use JSON;
use esmith::NetworksDB;
use esmith::ConfigDB;
my $ndb = esmith::NetworksDB->open_ro();
my $db = esmith::ConfigDB->open_ro();


sub help() {
    print "Usage: openvpn-status3 <socket> [subnet|p2p]\n\n";
    print "   Example: openvpn-status3 /var/spool/openvpn/host-to-net\n\n";
    exit(1);
}

# flush after every write
$| = 1;

if (scalar(@ARGV) < 1) {
    help();
}
my $socket = $ARGV[0];
my $topology = $ARGV[1] || 'subnet';
exit(1) unless (-e $socket);

socket(TSOCK, PF_UNIX, SOCK_STREAM,0);
connect(TSOCK, sockaddr_un($socket)) or exit(1);
my %results;
my $greetings = <TSOCK>;
if ($greetings) {
    print TSOCK "status 3\n";
    TSOCK->flush;
} else {
    exit(1);
}
while (defined(my $msg = <TSOCK>)) {
    exit(1) if $msg =~ /ERROR/;
    last if $msg =~ /END/;
    if ($topology eq 'subnet') {
        if ($msg =~ /^CLIENT_LIST/) {
            # Line format
            # Header, Common Name Real Address    Virtual Address Virtual IPv6 Address    Bytes Received  Bytes Sent  Connected Since Connected Since (time_t)    Username    Client ID   Peer ID
            my ($header, $cn, $real_address, $virtual_ipv4, $virtual_ipv6, $bytes_received, $bytes_sent, $since, $username, $client_id, $peer_id) = split('\t', $msg);
            next if ($cn eq 'UNDEF');

            # rerieve the parameters to find information in conntrack
            #udp      17 172 src=xxx.xxx.xxx.xxx dst=xxx.xxx.xxx.xxx sport=57045 dport=1194 packets=169 bytes=32971 
            #src=xxx.xxx.xxx.xxx dst=xxx.xxx.xxx.xxx sport=1194 dport=57045 packets=68 bytes=14663 [ASSURED] mark=0 delta-time=27 use=1
            my ($ipConntrack,$portConntrack) = split(':',$real_address);
            my ($provider,$RedInterface);
            my $protocol = ($db->get_prop('openvpn@host-to-net', 'UDPPort') ne '') ? 'udp' : 'tcp';

            open(FH, "/usr/sbin/conntrack -L -p $protocol --src $ipConntrack --sport $portConntrack|");
            my @fields;
            while (<FH>) {
                @fields = split('\s');
                foreach (@fields) {
                    # Compare and Find the good IP used in red NIC
                    next if ($_ !~ /^src=/);
                    next if ($_ =~ /$ipConntrack/);
                    $_ =~ s/^src=//;
                    $RedInterface = $_ ;
                }
            }
            close(FH);

            # Find the label of the red interface
            foreach ($ndb->red()) {
                my $key = $_->key;
                my $ipaddr = $ndb->get_prop($key,'ipaddr');
                if ($ipaddr eq  $RedInterface) {
                    $provider = $ndb->get_prop($key,'nslabel') || $key;
                }
            }
 
            $results{$cn} =  { 
                real_address => $real_address, 
                virtual_address => $virtual_ipv4, 
                bytes_received => $bytes_received,
                bytes_sent => $bytes_sent,
                since => $since,
                provider => $provider,
                red_interface => $RedInterface
            }
        }
    }
    if ($topology eq 'p2p') {
        # Line format: Updated,Wed Jun 12 08:29:13 2019
        if ($msg =~ /^Updated,(.*)$/) {
            $results{'stats'}{'since'} = $1;
            $results{'stats'}{'since'} =~ s/\s+$//; # remove trailing \r
        }
        # Line format: TUN/TAP read bytes,312 
        # Line format: TCP/UDP read bytes,2392
        # Line format: Auth read bytes,909
        if ($msg =~ /read bytes,(.*)$/) {
            $results{'stats'}{'bytes_received'} += int($1);
        }
        # Line format: TUN/TAP write bytes,312
        # Line format: TCP/UDP write bytes,2176
        if ($msg =~ /write bytes,(.*)$/) {
            $results{'stats'}{'bytes_sent'} += int($1);
        }
    }
}

my $json = JSON->new;
my $json_text   = $json->encode( \%results );
print $json_text;
exit(0);
